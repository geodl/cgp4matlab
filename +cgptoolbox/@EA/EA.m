classdef EA < handle
    % EA Class
    %   Initializes the evolutionary algorithm
    %
    %   The EA constructor is responsible for run the evolutionary
    %   algorithm, according to the number of runs and generations per run,
    %   while a solution is not found.
    %   The EA is aso responsible for handling the mutation of the final
    %   threshold, at each generation.
    %   Fire up the callbacks at each generation and run.
    %
    %   EA Properties:
    %       run_        {integer}  the current run
    %       generation_ {integer}  the current generation
    %       fittest_    {Mutation} the current fittest solution
    %       population_ {array}    the current population
    %       fitness_    {array}    array of fitness values
    %
    %   Examples:
    %       EA(CONFIG, SIZE, STRUCTURE, inputs, functions, parameters, callbacks)

    properties (Access = private)
        run_
        generation_
        fittest_
        population_
        fitness_
        output_
    end

    methods (Access = public)

        function this = EA(CONFIG, SIZE, STRUCTURE, inputs, functions, parameters, callbacks)
            % EA EA constructor
            %
            %   Input:
            %       CONFIG     {struct} struct constant with configuration values
            %       SIZE       {struct} size related struct constant
            %       STRUCTURE  {Structure} struct constant with genes split into sections
            %       inputs     {Array} inputs to the CGP
            %       functions  {Array} array of functions of the function-set
            %       parameters {Array} parameters to the genotype
            %       callbacks  {Array} callbacks to be executed at each section
            %
            %   Examples:
            %       EA(CONFIG, SIZE, STRUCTURE, inputs, functions, parameters, callbacks)

            this.run_ = 1;

            this.output_ = repmat( ...
                struct( ...
                    'SIZE', SIZE, ...
                    'STRUCTURE', STRUCTURE, ...
                    'genes', [], ...
                    'active', [], ...
                    'functions', '', ...
                    'fitness', 0 ...
                ), ...
                SIZE.RUNS, 1 ...
            );

            while (this.run_ <= SIZE.RUNS)

                this.setupNewRun_(CONFIG, SIZE, STRUCTURE, inputs, functions, parameters);

                this.fitness_(this.generation_) = this.fittest_.fitness();

                while this.solutionNotFound_(CONFIG.fitness_solution, CONFIG.fitness_operator) && this.maxGenerationNotReached_(SIZE.GENERATIONS)

                    % create new generation
                    generation = cgptoolbox.Generation( ...
                        CONFIG,              ...
                        SIZE,                ...
                        STRUCTURE,           ...
                        inputs,              ...
                        functions,           ...
                        parameters,          ...
                        this.fittest_,       ...
                        callbacks            ...
                    );

                    % assign best fit individual to parent
                    this.fittest_ = generation.fittest();

                    % assign fitness for this generation
                    this.fitness_(this.generation_) = this.fittest_.fitness();

                    genes = this.fittest_.genes();
                    active = this.fittest_.active();
                    
                    if this.generation_ - 1 ~= 0
                        if strcmp(CONFIG.fitness_operator, '<=') || strcmp(CONFIG.fitness_operator, '<')
                            if this.fitness_(this.generation_) < this.fitness_(this.generation_ - 1)
                                if isfield(callbacks, 'FITTEST_SOLUTION')
                                    callbacks.FITTEST_SOLUTION(          ...
                                        'FITTEST_SOLUTION',              ...
                                        this.generation_,                ...
                                        this.run_,                       ...
                                        this.fitness_(this.generation_), ...
                                        CONFIG.function_set,             ...
                                        active,                          ...
                                        genes,                           ...
                                        STRUCTURE.FUNCTIONS,             ...
                                        STRUCTURE.CONNECTIONS            ...
                                    );
                                end
                            end
                        elseif strcmp(CONFIG.fitness_operator, '>=') | strcmp(CONFIG.fitness_operator, '>')
                            if this.fitness_(this.generation_) > this.fitness_(this.generation_ - 1)
                                if isfield(callbacks, 'FITTEST_SOLUTION')
                                    callbacks.FITTEST_SOLUTION(          ...
                                        'FITTEST_SOLUTION',              ...
                                        this.generation_,                ...
                                        this.run_,                       ...
                                        this.fitness_(this.generation_), ...
                                        CONFIG.function_set,             ...
                                        active,                          ...
                                        genes,                           ...
                                        STRUCTURE.FUNCTIONS,             ...
                                        STRUCTURE.CONNECTIONS            ...
                                    );
                                end
                            end
                        end
                    end
                    
                    if isfield(callbacks, 'NEW_GENERATION')
                        callbacks.NEW_GENERATION(            ...
                            'NEW_GENERATION',                ...
                            this.generation_,                ...
                            this.run_,                       ...
                            this.fitness_(this.generation_), ...
                            CONFIG.function_set,             ...
                            active,                          ...
                            genes,                           ...
                            STRUCTURE.FUNCTIONS,             ...
                            STRUCTURE.CONNECTIONS            ...
                        );
                    end

                    this.generation_ = this.generation_ + 1;
                    CONFIG.generation = this.generation_;
                end

                if isfield(callbacks, 'NEW_RUN')
                    if this.generation_ == 1
                        generation = 1;
                    else
                        generation = this.generation_ - 1;
                    end

                    callbacks.NEW_RUN( ...
                        'NEW_RUN', ...
                        this.run_, ...
                        this.generation_, ...
                        this.fitness_(generation), ...
                        SIZE, ...
                        STRUCTURE, ...
                        this.fittest_.genes(), ...
                        this.fittest_.active(), ...
                        functions ...
                    );
                end

                this.output_(this.run_).genes = this.fittest_.genes();
                this.output_(this.run_).active = this.fittest_.active();
                this.output_(this.run_).fitness = this.fittest_.fitness();

                this.run_ = this.run_ + 1;
                CONFIG.run = this.run_;
            end
        end

    end
end
